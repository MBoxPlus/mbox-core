//
//  OpenTest.swift
//  MBoxCoreTests
//
//  Created by 詹迟晶 on 2019/12/10.
//  Copyright © 2019 bytedance. All rights reserved.
//

import XCTest
import Nimble
import MBoxCore

extension MBCommander {
    class MockOpen: MBCommander.Open {
        var openBlock: ((URL) -> ())?
        override func open(url: URL, withApplication appName: String? = nil) -> Bool {
            openBlock?(url)
            return true
        }

        class func testCMD(_ args: [String]? = nil, block: @escaping (URL) -> ()) {
            let cmd = try! MockOpen.init(argv: ArgumentParser(arguments: args ?? []))
            cmd.openBlock = block
            try! cmd.performAction()
        }
    }
}

class OpenTests: XCTestCase {

    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testPathToOpen() {
        let homePath = FileManager.home
        let cmd = try! MBCommander.MockOpen()
        FileManager.chdir(homePath) {
            expect(cmd.pathToOpen(nil)).isNil()
            expect(cmd.pathToOpen(".")) == homePath
            expect(cmd.pathToOpen("/other/path")) == "/other/path"
            expect(cmd.pathToOpen("..")) == homePath.deletingLastPathComponent
            expect(cmd.pathToOpen("relative")) == "\(homePath)/relative"
        }
    }

    func testUrlToOpen() {
        let cmd = try! MBCommander.MockOpen()
        expect(cmd.urlToOpen(nil)) == URL(string: "mbox://open")
        expect(cmd.urlToOpen("/path")) == URL(string: "mbox://open?path=/path")
        expect(cmd.urlToOpen("/white path")) == URL(string: "mbox://open?path=/white%20path")
    }

    func testRunCMD() {
        let home = FileManager.home
        FileManager.chdir(home)
        MBCommander.MockOpen.testCMD() { url in
            expect(url) == URL(string: "mbox://open")
        }
        MBCommander.MockOpen.testCMD(["."]) { url in
            expect(url) == URL(string: "mbox://open?path=\(home)")
        }
        MBCommander.MockOpen.testCMD(["path"]) { url in
            expect(url) == URL(string: "mbox://open?path=\(home)/path")
        }
        MBCommander.MockOpen.testCMD(["/path"]) { url in
            expect(url) == URL(string: "mbox://open?path=/path")
        }
        MBCommander.MockOpen.testCMD(["/white path"]) { url in
            expect(url) == URL(string: "mbox://open?path=/white%20path")
        }
    }
}

